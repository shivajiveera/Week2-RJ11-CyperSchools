{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\OneDrive\\\\Desktop\\\\Week2-RJ8-CyperSchools-main (2)\\\\Week2-RJ8-CyperSchools-main\\\\src\\\\Component\\\\TaskScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllTasks, tasks } from './TestApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskScreen = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  const [allTasks, setAllTasks] = useState([]);\n  useEffect(() => {\n    console.log(\"Task Screen\");\n    getAllTasks().then(foundTasks => setAllTasks(foundTasks));\n  }, []);\n  // useState(()=>{\n  //     console.log(\"Task updated\")\n  //     setCount(5)\n  // },[]);\n\n  // useEffect(()=>{\n  //     console.log(\"TaskScreen Updated\")\n  //     setCount(5)\n  // })\n\n  return allTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: e => setCount(count + 1),\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [task.taskNumber, task.taskName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: task.taskDescription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 14\n  }, this));\n};\n_s(TaskScreen, \"HCDyDu5GmJIiLM9E8H+r9dqV1Vk=\");\n_c = TaskScreen;\nexport default TaskScreen;\n\n//useEffect \n//it take two argument\n//1 is function that will be called after the component is rendered \n//2 is array of values that will be watch gor change optional\n//3 it will be called after the componet is rendered\n//3.aempty array passed:useEffect will run only on initial render \n//3.b no araay pass: useeffect will run only initial render and every estate update\n//3.c  Array of values passed : useEffect will run only on initial render and every time\n//when the value of any variabel in the array change\n\n//No ARRAY\n\n// const TaskScreen = ()=>{\n//     // const  [allTasks, setTacks]=useState([]);\n//  useState(()=>{\n//      console.log(\"Task Screen\")\n//  });\n//      return TaskScreen.map((task,index)=>(\n\n//               <div key={index}>\n//                  <h1>{task.taskNumber}{task.taskName}\n//                  </h1>\n\n//                  <p>{task.taskDescription}</p>\n\n//               </div>\n\n//      )\n\n//      )\n//  }\n\n//EMPTY ARRAY\n\n// const TaskScreen = ()=>{\n\n//     const [count,setCount]=useState(0);\n\n//    // const  [allTasks, setTacks]=useState([]);\n// useState(()=>{\n//     console.log(\"Task Screen\")\n// },[]);\n// useState(()=>{\n//     console.log(\"Task updated\")\n// });\n\n//     return TaskScreen.map((task,index)=>(\n\n//              <div key={index} onClick={(e)=>setCount(count +1)}>\n//                 <h1>{task.taskNumber}{task.taskName}\n//                 </h1>\n\n//                 <p>{task.taskDescription}</p>\n\n//              </div>\n\n//     )\n\n//     )\n// }\nvar _c;\n$RefreshReg$(_c, \"TaskScreen\");","map":{"version":3,"names":["React","useState","useEffect","getAllTasks","tasks","TaskScreen","count","setCount","allTasks","setAllTasks","console","log","then","foundTasks","map","task","index","e","taskNumber","taskName","taskDescription"],"sources":["C:/Users/shiva/OneDrive/Desktop/Week2-RJ8-CyperSchools-main (2)/Week2-RJ8-CyperSchools-main/src/Component/TaskScreen.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport{getAllTasks, tasks} from './TestApi'\nconst TaskScreen = ()=>{\n\n    const [count,setCount]=useState(0);\n\n   const  [allTasks, setAllTasks]=useState([]);\nuseEffect(()=>{\n    console.log(\"Task Screen\");\n    getAllTasks().then((foundTasks)=>setAllTasks(foundTasks));\n},[]);\n// useState(()=>{\n//     console.log(\"Task updated\")\n//     setCount(5)\n// },[]);\n\n// useEffect(()=>{\n//     console.log(\"TaskScreen Updated\")\n//     setCount(5)\n// })\n\n\n    return allTasks.map((task,index)=>(\n\n             <div key={index} onClick={(e)=>setCount(count +1)}>\n                <h1>{task.taskNumber}{task.taskName}\n                </h1>\n\n                <p>{task.taskDescription}</p>\n\n             </div>\n\n\n\n    )\n\n    )\n}\n\nexport default TaskScreen\n\n\n\n//useEffect \n//it take two argument\n//1 is function that will be called after the component is rendered \n//2 is array of values that will be watch gor change optional\n//3 it will be called after the componet is rendered\n//3.aempty array passed:useEffect will run only on initial render \n//3.b no araay pass: useeffect will run only initial render and every estate update\n//3.c  Array of values passed : useEffect will run only on initial render and every time\n//when the value of any variabel in the array change\n\n\n//No ARRAY\n\n// const TaskScreen = ()=>{\n//     // const  [allTasks, setTacks]=useState([]);\n//  useState(()=>{\n//      console.log(\"Task Screen\")\n//  });\n//      return TaskScreen.map((task,index)=>(\n \n//               <div key={index}>\n//                  <h1>{task.taskNumber}{task.taskName}\n//                  </h1>\n \n//                  <p>{task.taskDescription}</p>\n \n//               </div>\n \n \n \n//      )\n \n//      )\n//  }\n\n\n//EMPTY ARRAY\n\n// const TaskScreen = ()=>{\n\n//     const [count,setCount]=useState(0);\n\n//    // const  [allTasks, setTacks]=useState([]);\n// useState(()=>{\n//     console.log(\"Task Screen\")\n// },[]);\n// useState(()=>{\n//     console.log(\"Task updated\")\n// });\n\n//     return TaskScreen.map((task,index)=>(\n\n//              <div key={index} onClick={(e)=>setCount(count +1)}>\n//                 <h1>{task.taskNumber}{task.taskName}\n//                 </h1>\n\n//                 <p>{task.taskDescription}</p>\n\n//              </div>\n\n\n\n//     )\n\n//     )\n// }\n\n\n\n\n\n\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,SAAOC,WAAW,EAAEC,KAAK,QAAO,WAAW;AAAA;AAC3C,MAAMC,UAAU,GAAG,MAAI;EAAA;EAEnB,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACN,QAAQ,CAAC,CAAC,CAAC;EAEnC,MAAO,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAACR,QAAQ,CAAC,EAAE,CAAC;EAC9CC,SAAS,CAAC,MAAI;IACVQ,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BR,WAAW,EAAE,CAACS,IAAI,CAAEC,UAAU,IAAGJ,WAAW,CAACI,UAAU,CAAC,CAAC;EAC7D,CAAC,EAAC,EAAE,CAAC;EACL;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAGI,OAAOL,QAAQ,CAACM,GAAG,CAAC,CAACC,IAAI,EAACC,KAAK,kBAEtB;IAAiB,OAAO,EAAGC,CAAC,IAAGV,QAAQ,CAACD,KAAK,GAAE,CAAC,CAAE;IAAA,wBAC/C;MAAA,WAAKS,IAAI,CAACG,UAAU,EAAEH,IAAI,CAACI,QAAQ;IAAA;MAAA;MAAA;MAAA;IAAA,QAC9B,eAEL;MAAA,UAAIJ,IAAI,CAACK;IAAe;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA,GAJtBJ,KAAK;IAAA;IAAA;IAAA;EAAA,QAUvB,CAEA;AACL,CAAC;AAAA,GAnCKX,UAAU;AAAA,KAAVA,UAAU;AAqChB,eAAeA,UAAU;;AAIzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAIA;;AAEA;AACA;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAIA;;AAEA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}